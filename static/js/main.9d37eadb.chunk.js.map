{"version":3,"sources":["images/Logo.png","serviceWorker.js","components/cabecalho/cabecalho.jsx","pages/home/home.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","aberto","abrirMenu","menu","document","querySelector","className","Cabecalho","src","Logo","alt","title","class","onClick","href","Home","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,iJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCXFC,G,OAAS,GAEPC,EAAY,WACd,IAAMC,EAAOC,SAASC,cAAc,SAEjCJ,EACCE,EAAKG,WAAa,MAElBH,EAAKG,UAAY,oBAErBL,GAAUA,GA0CCM,EAvCG,WACd,OACI,gCACI,yBAAKD,UAAU,qBACX,yBAAKE,IAAKC,IAAMC,IAAI,mCAAmCJ,UAAU,OAAOK,MAAM,wEAC9E,yBAAKC,MAAM,cAAcC,QAASX,GAC9B,yBAAKU,MAAM,QACX,yBAAKA,MAAM,QACX,yBAAKA,MAAM,WAEf,6BACI,4BACI,4BACI,uBAAGE,KAAK,IAAIR,UAAU,2BAAtB,SAEJ,4BACI,uBAAGQ,KAAK,IAAIR,UAAU,2BAAtB,aAEJ,4BACI,uBAAGQ,KAAK,IAAIR,UAAU,2BAAtB,eAEJ,4BACI,uBAAGQ,KAAK,IAAIR,UAAU,2BAAtB,eAEJ,4BACI,uBAAGQ,KAAK,IAAIR,UAAU,2BAAtB,YAEJ,6BACI,4BACI,uBAAGQ,KAAK,IAAIR,UAAU,2BAA0B,uBAAGM,MAAM,4BCpC1EG,EARF,WACT,OACI,oCACI,kBAAC,EAAD,QCEZC,IAASC,OACP,kBAAC,EAAD,MACAb,SAASc,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d37eadb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.870ca010.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nimport Logo from \"../../images/Logo.png\";\r\n\r\n//CSS\r\nimport \"./cabecalho.css\";\r\n\r\nlet aberto = true;\r\n\r\nconst abrirMenu = () => {\r\n    const menu = document.querySelector(\".menu\");\r\n    \r\n    if(aberto)\r\n        menu.className += \" on\";\r\n    else \r\n        menu.className = \"container-lg menu\";\r\n    \r\n    aberto = !aberto;\r\n}\r\n\r\nconst Cabecalho = () => {\r\n    return (\r\n        <header>\r\n            <div className=\"container-lg menu\">\r\n                <img src={Logo} alt=\"Logo da empresa Santos Baterias.\" className=\"logo\" title=\"Santos Baterias - A melhor opção para você e seu carro! :)\"/>\r\n                <div class=\"menu-toggle\" onClick={abrirMenu}>\r\n                    <div class=\"one\"></div>\r\n                    <div class=\"two\"></div>\r\n                    <div class=\"three\"></div>\r\n                </div>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <a href=\"#\" className=\"texto-bold texto-branco\">Home</a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"#\" className=\"texto-bold texto-branco\">Produtos</a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"#\" className=\"texto-bold texto-branco\">Quem somos</a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"#\" className=\"texto-bold texto-branco\">Visite-nos</a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"#\" className=\"texto-bold texto-branco\">Contato</a>\r\n                        </li>\r\n                        <div>\r\n                            <li>\r\n                                <a href=\"#\" className=\"texto-bold texto-branco\"><i class=\"fab fa-whatsapp\"></i></a>\r\n                            </li>\r\n                        </div>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Cabecalho;","import React from \"react\";\r\n\r\n//Components\r\nimport Cabecalho from \"../../components/cabecalho/cabecalho\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n            <Cabecalho/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n//CSS\nimport \"./index.css\";\n\n//Pages\nimport Home from \"./pages/home/home\";\n\nReactDOM.render(\n  <Home/>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}